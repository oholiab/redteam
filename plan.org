#+TITLE: RED TEAMING
* Goals
+ To learn some red teaming methods
+ To understand attack tooling
+ To have bright ideas about defensive methods
+ To have a better understanding of "threats"
+ To be able to bug bounty
+ To feel 1337

* Maxims
- I know automation, I should automate everything
- Reproduceablity is key
- Write everything down

* Machine setup
** DONE Terraform a droplet
** DONE Ansible it up
*** DONE Add a user
*** DONE Set up shell
*** DONE Set up editors
*** DONE Write playbook for installing tools on page 5
- psf is a framework for installing the tools anyway
- Takes a fucking age and is interactive in cases so I'm not sure it can be done in batch :/
*** DONE Automate playbook for dnscat2 setup
- This seems like a really good thing to know how to use and recognise
- Will also be handy for captive portal wifi
- Should try this on a prod server and see if it gets caught
- Should be able to alert on spikes in:
  - Uncached DNS lookups
  - High entropy subdomains
**** TODO Terraform gandi nameserver setup
- Should be able to pull IP address out of terraform host state
- Use `ns1.cat.grimmwa.re`
**** DONE Ansible module for installing and setting up the service
- needs further work but that's okay!
***** DONE Install via ptf
***** DONE Create unit file
***** DONE Start service
**** DONE Set it up properly
- Needs to run in a tmux session so it can be attached to
**** DONE Install client code on laptop
*** DONE iptables
- Close off 80 and 443 until I'm ready to use them
- Have temporarily:
iptables -A INPUT -p tcp --destination-port 80 -j DROP
iptables -A INPUT -p tcp --destination-port 443 -j DROP
*** TODO ansible iptables

* To Research
** TODO Make notes from o.rc post-exploitation bash framework notes on cyberpunk
- Link is in your work plan
- https://raw.githubusercontent.com/zMarch/Orc/master/README.md 
*** Takes versions of
- kernel
- glibc
- dbus
- OS
**** TODO Why is dbus a good target?
*** Gathers IP from HTTP and DNS using big sites (Akamai, Google) to avoid detection
**** TODO Can we think of good methods to detect IP address gathering, especially from an unprivileged user?
*** Checks to see if it's in a chroot or jail
**** TODO Enumerate these methods - is it possible to hide the fact you're in a container?
     - Do we want to hide this?
*** Checks for presence of
- SELinux
- AppArmor
- GrSec
*** Gets all users with a shell
- Gathers idle time for PTYs
- Gathers processes that *don't* have a shell
*** Attempts to enumerate other hosts
- Mentions using ping...
**** TODO Find out why ping is particularly noisey, whether people realistically detect it
*** Portscans...
- 21 : ftp
- 22 : ssh
- 23 : telnet
- 80 : http
- 443 : https
- 8080 : http-alt 8443, 129, 445, 3389, 3306
** TODO Set up a blog for this shit
- Can probably monorepo the whole thing
** DONE Open source setup tools
*** DONE Add documentation
**** Enumerate prerequisites
- `pass` is used for secrets
- ecdsa keys are assumed
- digitalocean
- terraform
- ansible
- make
- tested on an Arch system
**** Caveats
- Environment is not portable - you will have to migrate secrets yourself
- May create an entirely new environment if the key fingerprint changes!
- I have no idea what I'm doing
*** DONE Write basic tests to check that secrets and PII aren't checked in
** TODO Start working against the "Chat application" in the playbook
** TODO Talk to Chris about setting up labs
- He might be willing to work together on something!

* Notes
** [[https://github.com/Ne0nd0g/merlin][Merlin]] looks interesting
- Post exploitation C2
- Written in Go
- Uses HTTP/2 for multiplexed connections
** nmap diffing looks like an awesome idea
*** DONE test it out by setting up a cron'd nmap diff with a mailout for the host itself so you'll be notified if you add new listening services!
- setting up MTAs are a pain in the ass and I don't want to hook any of this up to my actual mail accounts so I'll sort out another notification mechanism later if I can be bothered
- Possibly RSS + TLS client certs or something
- Actually on second thoughts I have some free mailboxes sitting around...
**** TODO set up sendmail
*** DONE delete empty diffs with cron
** Explore `dpkg rootkit` idea
- Replace on-disk post-rm script for a package with something that will hook subsequent packages when removed
- You can spread this around a few packages!
- Means code can ensure persistence in files managed by dpkg
- Hook common utilities (maybe even init?) to work as trojans
- post-rm script hooks will ensure persistence across upgrades!
 
* Resources
** VMs
VulnHub
** Domain-related malware resources
https://zelster.com/lookup-malicious-websites
